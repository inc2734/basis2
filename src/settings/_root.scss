@use 'sass:list';
@use 'sass:math';
@use '../variables/variables' as variables;

:root {
  /**
   * Column width in typography.
   */
  --unitone--measure: 42rem;

  /**
   * Colors.
   */
  --unitone--color--white: #fff;
  --unitone--color--black: #000;
  --unitone--color--text: #222;
  --unitone--color--gray: #ced4da;
  --unitone--color--light-gray: #e9ecef;
  --unitone--color--bright-gray: #f8f9fa;
  --unitone--color--dark-gray: #868e96;

  /**
   * Font size level.
   * It is not recommended to override this value with :root in order to have the size determined based on 0.
   */
  --unitone--font-size: 0;

  /**
   * The 1rem px font size (no units).
   */
  --unitone--base-font-size: 16;

  --unitone--harmonic-sequence-base: 8;
  --unitone--min-harmonic-sequence-base: 9;
  --unitone--max-harmonic-sequence-base: var(--unitone--harmonic-sequence-base);

  /**
   * Gutter provided above and below the text in a line.
   */
  --unitone--half-leading: .3;

  /**
   * The line-height slope. If smaller, the line-height is adjusted to a smaller value as the font size increases.
   *
   * A =(1, 1.6) // 1rem / 1.6
   * B =(8, 1.1) // 4rem / 1.1
   * y = -0.0714285714286x + 1.6714285714286 // y = line-height, x = Font size ratio
   *
   * @see https://www.geogebra.org/graphing?lang=ja
   */
  --unitone--line-height-slope: -0.07143;

  /**
   * Font family
   */
  --unitone--font-family: sans-serif;

  /**
   * Box shadow
   */
  --unitone--global--box-shadow: 0 5px 20px -5px rgb(0 0 0 / 20%);

  /**
   * Border radius
   */
  --unitone--global--border-radius: 4px;

  /**
   * Default gap
   */
  --unitone--global--gap: var(--unitone--s2);
  --unitone--global--text-gap: var(--unitone--s1);

  /**
   * Default gutters
   */
  --unitone--global--gutters: min(6vw, var(--unitone--rem2));

  /**
   * Reference value of the modular scale for space.
   */
  --unitone--_space-reference-value: #{ variables.$line-height } / 3;

  /**
   * Modular scales for spaces.
   */
  --unitone--ms-2: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 1) });
  --unitone--ms-1: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 2) });
  --unitone--ms0: 0;
  --unitone--ms1: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 3) });
  --unitone--ms2: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 4) });
  --unitone--ms3: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 5) });
  --unitone--ms4: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 6) });
  --unitone--ms5: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 7) });
  --unitone--ms6: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 8) });
  --unitone--ms7: calc(var(--unitone--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 9) });

  /**
   * Modular scales for spaces (em based).
   */
  --unitone--em-2: calc(1em * var(--unitone--ms-2));
  --unitone--em-1: calc(1em * var(--unitone--ms-1));
  --unitone--em0: 0em;
  --unitone--em1: calc(1em * var(--unitone--ms1));
  --unitone--em2: calc(1em * var(--unitone--ms2));
  --unitone--em3: calc(1em * var(--unitone--ms3));
  --unitone--em4: calc(1em * var(--unitone--ms4));
  --unitone--em5: calc(1em * var(--unitone--ms5));
  --unitone--em6: calc(1em * var(--unitone--ms6));
  --unitone--em7: calc(1em * var(--unitone--ms7));

  /**
   * Modular scales for spaces (rem based).
   */
  --unitone--rem-2: calc(1rem * var(--unitone--ms-2));
  --unitone--rem-1: calc(1rem * var(--unitone--ms-1));
  --unitone--rem0: 0rem;
  --unitone--rem1: calc(1rem * var(--unitone--ms1));
  --unitone--rem2: calc(1rem * var(--unitone--ms2));
  --unitone--rem3: calc(1rem * var(--unitone--ms3));
  --unitone--rem4: calc(1rem * var(--unitone--ms4));
  --unitone--rem5: calc(1rem * var(--unitone--ms5));
  --unitone--rem6: calc(1rem * var(--unitone--ms6));
  --unitone--rem7: calc(1rem * var(--unitone--ms7));

  /**
   * Modular scales for spaces.
   */
  @function _generate-fluid-spacing($min, $max) {
    $slope: calc((#{ $max } - #{ $min }) / (#{ variables.$max-breakpoint - variables.$min-breakpoint }));
    $yAxis: calc(#{ -1 * variables.$min-breakpoint } * #{ $slope } + #{ $min });
    $preferredValue: calc(#{ $yAxis } * 1em + #{ $slope } * 100vw);
    @return clamp(#{ $min } * 1em, #{ $preferredValue }, #{ $max } * 1em);
  }
  $_quotient: math.div(variables.$min-breakpoint, variables.$max-breakpoint);
  --unitone--s-2: var(--unitone--em-2);
  --unitone--s-1: var(--unitone--em-1);
  --unitone--s0: var(--unitone--em0);
  --unitone--s1: var(--unitone--em1);
  --unitone--s2: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms2) * #{ $_quotient }), var(--unitone--ms2)) };
  --unitone--s3: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms3) * #{ $_quotient }), var(--unitone--ms3)) };
  --unitone--s4: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms4) * #{ $_quotient }), var(--unitone--ms4)) };
  --unitone--s5: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms5) * #{ $_quotient }), var(--unitone--ms5)) };
  --unitone--s6: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms6) * #{ $_quotient }), var(--unitone--ms6)) };
  --unitone--s7: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms7) * #{ $_quotient }), var(--unitone--ms7)) };

  /**
   * Modular scales for padding.
   *
   * Left and right padding on mobile devices has a significant impact on readability.
   * For this reason, we prepare special scales.
   */
  --unitone--p-2: var(--unitone--em-2);
  --unitone--p-1: var(--unitone--em-1);
  --unitone--p0: var(--unitone--em0);
  --unitone--p1: var(--unitone--em1);
  --unitone--p2: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms2) * #{ $_quotient } * .2), var(--unitone--ms2)) };
  --unitone--p3: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms3) * #{ $_quotient } * .2), var(--unitone--ms3)) };
  --unitone--p4: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms4) * #{ $_quotient } * .2), var(--unitone--ms4)) };
  --unitone--p5: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms5) * #{ $_quotient } * .2), var(--unitone--ms5)) };
  --unitone--p6: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms6) * #{ $_quotient } * .2), var(--unitone--ms6)) };
  --unitone--p7: #{ _generate-fluid-spacing(calc(var(--unitone--ms1) + var(--unitone--ms7) * #{ $_quotient } * .2), var(--unitone--ms7)) };

  /**
   * Max width of the container.
   */
  --unitone--container-max-width: #{ variables.$container-max-width };

  --unitone--grid-columns: #{ variables.$grid-columns };
  --unitone--grid-rows: #{ variables.$grid-rows };
  --unitone--grid-gap: var(--unitone--global--gap);

  /**
   * Grid sizes (% based).
   */
  --unitone--_pg-base: calc((100% - var(--unitone--grid-gap) * (var(--unitone--grid-columns) - 1)) / var(--unitone--grid-columns));
  --unitone--pg0: 0%;
  @for $i from 1 through variables.$grid-columns {
    --unitone--pg#{ $i }: calc(var(--unitone--_pg-base) * #{ $i } + var(--unitone--grid-gap) * #{ $i - 1 });
  }

  /**
   * Grid sizes (container based).
   */
  --unitone--_cg-base: calc((var(--unitone--container-max-width) - var(--unitone--grid-gap) * (var(--unitone--grid-columns) - 1)) / var(--unitone--grid-columns));
  --unitone--cg0: 0%;
  @for $i from 1 through variables.$grid-columns {
    --unitone--cg#{ $i }: calc(var(--unitone--_cg-base) * #{ $i } + var(--unitone--grid-gap) * #{ $i - 1 });
  }
}
