@use 'sass:list';
@use 'sass:math';
@use '../variables/variables' as variables;

:root {
  /**
   * Column width in typography.
   */
  --measure: 38rem;

  /**
   * Collors.
   */
  --color-white: #fff;
  --color-black: #000;
  --color-text: #222;

  /**
   * Font size level.
   * It is not recommended to override this value with :root in order to have the size determined based on 0.
   */
  --font-size: 0;

  /**
   * The 1rem px font size (no units).
   */
  --base-font-size: 16;

  --harmonic-sequence-base: 8;
  --min-harmonic-sequence-base: 9;
  --max-harmonic-sequence-base: var(--harmonic-sequence-base);

  /**
   * Gutter provided above and below the text in a line.
   */
  --half-leading: .3;

  /**
   * The line-height slope. If smaller, the line-height is adjusted to a smaller value as the font size increases.
   *
   * A =(1, 1.6) // 1rem / 1.6
   * B =(4, 1.1) // 4rem / 1.1
   * y = -0.1666666666667x + 1.7666666666667 // y = line-height, x = Font size ratio
   *
   * @see https://www.geogebra.org/graphing?lang=ja
   */
  --line-height-slope: -0.16666;

  /**
   * Font family
   */
  --font-family: sans-serif;

  /**
   * Reference value of the modular scale for space.
   */
  --_space-reference-value: #{ variables.$line-height } / 3;

  /**
   * Modular scales for spaces.
   */
  --ms-2: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 1) });
  --ms-1: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 2) });
  --ms0: 0;
  --ms1: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 3) });
  --ms2: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 4) });
  --ms3: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 5) });
  --ms4: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 6) });
  --ms5: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 7) });
  --ms6: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 8) });
  --ms7: calc(var(--_space-reference-value) * #{ list.nth(variables.$fibonacci-sequence, 9) });

  /**
   * Modular scales for spaces (em based).
   */
  --em-2: calc(1em * var(--ms-2));
  --em-1: calc(1em * var(--ms-1));
  --em0: 0em;
  --em1: calc(1em * var(--ms1));
  --em2: calc(1em * var(--ms2));
  --em3: calc(1em * var(--ms3));
  --em4: calc(1em * var(--ms4));
  --em5: calc(1em * var(--ms5));
  --em6: calc(1em * var(--ms6));
  --em7: calc(1em * var(--ms7));

  /**
   * Modular scales for spaces (rem based).
   */
  --rem-2: calc(1rem * var(--ms-2));
  --rem-1: calc(1rem * var(--ms-1));
  --rem0: 0rem;
  --rem1: calc(1rem * var(--ms1));
  --rem2: calc(1rem * var(--ms2));
  --rem3: calc(1rem * var(--ms3));
  --rem4: calc(1rem * var(--ms4));
  --rem5: calc(1rem * var(--ms5));
  --rem6: calc(1rem * var(--ms6));
  --rem7: calc(1rem * var(--ms7));

  /**
   * Modular scales for spaces.
   */
  @function _generate-fluid-spacing($min, $max) {
    $slope: calc((#{ $max } - #{ $min }) / (#{ variables.$max-breakpoint - variables.$min-breakpoint }));
    $yAxis: calc(#{ -1 * variables.$min-breakpoint } * #{ $slope } + #{ $min });
    $preferredValue: calc(#{ $yAxis } * 1em + #{ $slope } * 100vw);
    @return clamp(#{ $min } * 1em, #{ $preferredValue }, #{ $max } * 1em);
  }
  $_quotient: math.div(variables.$min-breakpoint, variables.$max-breakpoint);
  --s-2: var(--em-2);
  --s-1: var(--em-1);
  --s0: var(--em0);
  --s1: var(--em1);
  --s2: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms2) * #{ $_quotient }), var(--ms2)) };
  --s3: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms3) * #{ $_quotient }), var(--ms3)) };
  --s4: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms4) * #{ $_quotient }), var(--ms4)) };
  --s5: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms5) * #{ $_quotient }), var(--ms5)) };
  --s6: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms6) * #{ $_quotient }), var(--ms6)) };
  --s7: #{ _generate-fluid-spacing(calc(var(--ms1) + var(--ms7) * #{ $_quotient }), var(--ms7)) };

  /**
   * Max width of the container.
   */
  --container-max-width: #{ variables.$container-max-width };

  $_grid-columns: 12;
  --_grid-gutters: calc(#{ $_grid-columns - 1 } * var(--s1));

  /**
   * Grid sizes (% based).
   */
  $_percentage-grid-width: calc((100% - var(--_grid-gutters)) / #{ $_grid-columns });
  --pg0: 0%;
  @for $i from 1 through $_grid-columns {
    --pg#{ $i }: calc(#{ $_percentage-grid-width } * #{ $i } + var(--s1) * #{ $i - 1 });
  }

  /**
   * Grid sizes (container based).
   */
  $_container-grid-width: calc((var(--container-max-width) - var(--_grid-gutters)) / #{ $_grid-columns });
  --cg0: 0%;
  @for $i from 1 through $_grid-columns {
    --cg#{ $i }: calc(#{ $_container-grid-width } * #{ $i } + var(--s1) * #{ $i - 1 });
  }

  /**
   * Box shadow
   */
  --shadow: 0 5px 20px -5px rgb(0 0 0 / 20%);
}
