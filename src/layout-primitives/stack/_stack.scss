@mixin abstract-stack() {
  --unitone--divider-width: 1px;
  --unitone--divider-style: solid;
  --unitone--divider-color: var(--unitone--color--gray);
  --unitone--gap: var(--unitone--global--text-gap);

  display: flex;
  flex-direction: column;
  gap: var(--unitone--gap);
  list-style: none;

  > * {
    margin-top: 0;
    margin-bottom: 0;
  }

  &:only-child {
    height: 100%;
  }

  &[data-unitone-layout~="-divider\:stripe"] {
    gap: 0;

    > * {
      position: relative;
      padding-top: var(--unitone--gap);
      padding-bottom: var(--unitone--gap);

      &::before {
        content: '';
        position: absolute;
        inset: 0;
        user-select: none;
        border-bottom: var(--unitone--divider-width) var(--unitone--divider-style) var(--unitone--divider-color);
      }
    }

    > :first-child {
      &::before {
        border-top: var(--unitone--divider-width) var(--unitone--divider-style) var(--unitone--divider-color);
      }
    }
  }

  &[data-unitone-layout~="-divider\:underline"] {
    gap: 0;

    > * {
      padding-top: var(--unitone--gap);
      padding-bottom: var(--unitone--gap);

      &::before {
        content: '';
        position: absolute;
        inset: 0;
        user-select: none;
        border-bottom: var(--unitone--divider-width) var(--unitone--divider-style) var(--unitone--divider-color);
      }
    }

    > :first-child {
      padding-top: 0;
    }
  }

  &[data-unitone-layout~="-divider\:bordered"] {
    gap: 0;

    > * {
      padding: var(--unitone--gap);

      &::before {
        content: '';
        position: absolute;
        inset: 0;
        user-select: none;
        border-width: 0 var(--unitone--divider-width) var(--unitone--divider-width) var(--unitone--divider-width);
        border-style: var(--unitone--divider-style);
        border-color: var(--unitone--divider-color);
      }
    }

    > :first-child {
      &::before {
        border-top-width: var(--unitone--divider-width);
      }
    }
  }

  &[data-unitone-layout~="-negative"] {
    gap: 0;

    > * + * {
      margin-top: calc(-1 * var(--unitone--gap));
    }
  }
}

@mixin stack() {
  [data-unitone-layout~="stack"] {
    @include abstract-stack();

    // @todo
    // Specify a component whose width is specified by max-width of the child element, not by itself.
    > [data-unitone-layout~="text"] {
      margin-right: 0;
      margin-left: 0;
      max-width: none;
    }
  }

  :where([data-unitone-layout~="stack"] > li) {
    margin-left: 0;
  }
}
