@mixin abstract-text() {
  --unitone--gap: var(--unitone--s1);
  --unitone--column-gap: var( --unitone--gap);
  --unitone--max-width: var(--unitone--measure);

  > * {
    margin: 0 auto;
  }

  > *:not(:first-child) {
    margin-top: calc(var(--unitone--margin-top, 1) * var(--unitone--gap));
  }

  > *:not(:last-child) {
    margin-bottom: calc(var(--unitone--margin-bottom, 1) * var(--unitone--gap));
  }

  > h1 {
    --unitone--font-size: 4;
  }

  > :where(h2, h3, h4, h5, h6) {
    --unitone--margin-bottom: 0;

    & + :where(h2, h3, h4, h5, h6) {
      --unitone--margin-top: .5;
    }
  }

  > h2 {
    --unitone--font-size: 3;
  }

  > h3 {
    --unitone--font-size: 2;
  }

  > h4 {
    --unitone--font-size: 1;
  }

  > h5 {
    --unitone--font-size: 0;

    & + * {
      --unitone--margin-top: .5;
    }
  }

  > h6 {
    --unitone--font-size: 0;

    & + * {
      --unitone--margin-top: .5;
    }
  }

  &[data-unitone-layout~="-column"] {
    column-width: var(--unitone--max-width);
    gap: var(--unitone--column-gap);
  }
}

@mixin text() {
  [data-unitone-layout~="text"] {
    @include abstract-text();
  }

  :where([data-unitone-layout~="text"] > *) {
    max-width: min(100%, var(--unitone--max-width));
  }

  :where([data-unitone-layout~="text"][data-unitone-layout~="-center"]) > * {
    width: fit-content;
  }

  :where([data-unitone-layout~="text"][data-unitone-layout~="-column"]) > * {
    max-width: initial;
  }

  [data-unitone-layout~="text"]:lang(ja) {
    font-feature-settings: "palt" 0;
    font-kerning: none;

    > :where(h1, h2, h3, h4, h5) {
      font-feature-settings: "palt" 1;
      font-kerning: normal;
    }
  }
}
